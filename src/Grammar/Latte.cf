-- programs ------------------------------------------------

entrypoints Program ;

Prog.          Program ::= [TopDef] ;

FnTopDef.      TopDef ::= FnDef ;

ClassTopDef.   TopDef ::= ClassDef ;

separator nonempty TopDef "" ;

-- class decl ----

ClassFinDef.   ClassDef ::= "class" Ident "{" [CStmt] "}" ;

ClassExtDef.   ClassDef ::= "class" Ident "extends" Ident "{" [CStmt] "}" ;

MethodDef.     CStmt ::= FnDef ;

FieldDef.      CStmt ::= Type Ident ";" ;

separator CStmt "" ;

-- function decl ------------------------------------------

FunDef.	   FnDef ::= Type Ident "(" [Arg] ")" Block ;

FunArg.    Arg ::= Type Ident ;

separator  Arg "," ;

-- statements ----------------------------------------------

SBlock.    Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= Type [Item] ";" ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

Ass.       Stmt ::= Expr6 "=" Expr  ";" ;

Incr.      Stmt ::= Expr6 "++"  ";" ;

Decr.      Stmt ::= Expr6 "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

ForEach.   Stmt ::= "for" "(" Type Ident ":" Expr6 ")" Stmt ;

SExp.      Stmt ::= Expr  ";" ;

-- Types ---------------------------------------------------

Int.       Type1 ::= "int" ;

Str.       Type1 ::= "string" ;

Bool.      Type1 ::= "boolean" ;

Void.      Type1 ::= "void" ;

Arr.       Type2 ::= Type "[]" ;

Class.     Type1 ::= Ident ;

_.         Type ::= Type1 ;

_.         Type ::= Type2 ;

internal   Fun. Type ::= Type "(" [Type] ")" ;

internal   Ref. Type ::= Type "&" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr7 ::= Ident ;

ESelf.     Expr7 ::= "self" ;

ELitInt.   Expr7 ::= Integer ;

ELitTrue.  Expr7 ::= "true" ;

ELitFalse. Expr7 ::= "false" ;

EString.   Expr7 ::= String ;

ENull.     Expr7 ::= "null" ;

EArrGet.   Expr7 ::= Expr6 "[" Expr "]" ;

EFieldGet. Expr7 ::= Expr6 "." Ident ;

EMethod.   Expr7 ::= Expr6 "." Ident "(" [Expr] ")" ;

EApp.      Expr7 ::= Ident "(" [Expr] ")" ;

EClassNull. Expr6 ::= "(" Ident ")" "null" ;

EArrNull.  Expr6::= "(" Type2 ")" "null" ;

ENewArr.   Expr6 ::= "new" Type "[" Expr "]" ;

ENewObj.   Expr6 ::= "new" Type ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr5 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;
